# functions
function random_prompt() {
  # Symbols from http://www.alanwood.net/unicode/miscellaneous_symbols.html
  prompts[0]="☭" # hammer & sickle
  prompts[1]="★" # star
  prompts[2]="☁" # cloud
  prompts[3]="☯" # yin-yang
  prompts[4]="♥" # heart
  prompts[5]="♦" # diamond
  prompts[6]="♣" # club
  prompts[7]="♠" # spade
  prompts[8]="♬" # music notes
  prompts[9]="☢" # radiation
  prompts[10]="☿" # mercury
  prompts[11]="♀" # venus
  prompts[12]="♁" # earth
  prompts[13]="♂" # mars
  prompts[14]="♃" # jupiter
  prompts[15]="♄" # saturn
  prompts[16]="♅" # uranus
  prompts[17]="♆" # neptune
  prompts[18]="♇" # pluto
  echo "${prompts[RANDOM % ${#prompts[@]}]}"
}

function git_current_branch() {
  git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///'
}

function git_current_origin() {
  git config --get remote.origin.url | sed -e 's/^.*\://' | sed -e 's/\.git.*//'
}

function git_current_domain() {
  git config --get remote.origin.url | sed -e 's/^.*\@//' | sed -e 's/\:.*//'
}

function git_ref_origin() {
  git rev-parse origin
}

function git_ref_head() {
  git rev-parse HEAD
}

function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

function sendkey() {
  ssh -q $USER@$1 "mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys"
  cat ~/.ssh/id_rsa.pub | ssh -q $USER@$1 "cat - >> ~/.ssh/authorized_keys"
}

function cdp() {
  cd $HOME/Projects/personal
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdgo() {
  cd $GOPATH/src/github.com
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdg() {
  cd $HOME/Projects/github
  if [ -n "$1" ]; then
    cd $1
  fi
}

function loc() {
  # git ls-files | while read f; do git blame -f --line-porcelain "${f}" ; done | grep '^author ' | sort -f | uniq -ic | sort -n
  git ls-tree -r -z --name-only HEAD | xargs -0 -n1 git blame --line-porcelain HEAD | grep  "^author " | sort -f | uniq -ic | sort -n
}

function totloc() {
  # Walk through a top level directory into each git repo and get loc
  for d in `ls -d */`; do echo; pushd $d; if [ -d .git ]; then loc; fi; popd >> /dev/null ; done
}

function findSSH() {
  nmap -p22 -Pn -oG - 192.168.1.0/24 | awk '/22\/open/ {print $2}'
}

function findHTTP() {
  nmap -p80,8080,8081,3000,3001,3002 -Pn -oG - 192.168.0.0/16 | awk '/open/ {print $2}'
}

function findNAS() {
  nmap -p5000 -Pn -oG - 192.168.1.0/24 | awk '/open/ {print $2}' | egrep -v "192.168.0.1$"
}

function findUnifi() {
  nmap -p8443 -Pn -oG - 192.168.1.1/24 | awk '/open/ {print $2}'
}

function getuuid() {
  uuidgen | awk '{printf tolower($0)}' | tee /dev/tty | pbcopy && echo
}

# Stop RCD from opening iTunes when Bluetooth Headphones get a call
# Must run all commands with sudo
# https://discussions.apple.com/thread/2570254
function stopRCD() {
  launchctl stop com.apple.rcd
  launchctl unload /System/Library/LaunchAgents/com.apple.rcd.plist
}

function startRCD() {
  sudo chmod 755 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
  launchctl start com.apple.rcd
}

function nukeRCD() {
  sudo chmod 000 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
  sudo pkill -9 rcd
}

function unNukeRCD() {
  sudo chmod 755 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
}

# Count uniq lines and reverse sort
function countuniquelines () { sort "$1" | uniq -c | sort -bgr; }
