#! /usr/bin/env bash

# functions
function random_prompt() {
  # Symbols from http://www.alanwood.net/unicode/miscellaneous_symbols.html
  prompts[0]="☭" # hammer & sickle
  prompts[1]="★" # star
  prompts[2]="☁" # cloud
  prompts[3]="☯" # yin-yang
  prompts[4]="♥" # heart
  prompts[5]="♦" # diamond
  prompts[6]="♣" # club
  prompts[7]="♠" # spade
  prompts[8]="♬" # music notes
  prompts[9]="☢" # radiation
  prompts[10]="☿" # mercury
  prompts[11]="♀" # venus
  prompts[12]="♁" # earth
  prompts[13]="♂" # mars
  prompts[14]="♃" # jupiter
  prompts[15]="♄" # saturn
  prompts[16]="♅" # uranus
  prompts[17]="♆" # neptune
  prompts[18]="♇" # pluto
  echo "${prompts[RANDOM % ${#prompts[@]}]}"
}

# Git

fastforward() {
    git fetch upstream
    git merge upstream/master master
}

function git_current_branch() {
  git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///'
}

function gpthis() {
  cur_branch=$(git_current_branch)
  if [ "${cur_branch}" == "main" ] || [ "${cur_branch}" == "master" ]; then
    echo "Cannot push to ${cur_branch}!"
  else
    git push origin "HEAD:${cur_branch}"
  fi
}

function gpfthis() {
  cur_branch=$(git_current_branch)
  if [ "${cur_branch}" == "main" ] || [ "${cur_branch}" == "master" ]; then
    echo "Cannot push to ${cur_branch}!"
  else
    git push --force origin "HEAD:${cur_branch}"
  fi
}

function git_current_origin() {
  git config --get remote.origin.url | sed -e 's/^.*\://' | sed -e 's/\.git.*//'
}

function git_current_domain() {
  git config --get remote.origin.url | sed -e 's/^.*\@//' | sed -e 's/\:.*//'
}

function git_ref_origin() {
  git rev-parse origin
}

function git_ref_head() {
  git rev-parse HEAD
}

function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

function sendkey() {
  ssh -q $USER@$1 "mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys"
  cat ~/.ssh/id_rsa.pub | ssh -q $USER@$1 "cat - >> ~/.ssh/authorized_keys"
}

function newkey() {
  name=$1
  sshkey="${HOME}/.ssh/${name}_$(whoami)_ed25519"
  ([ ! -f "${sshkey}" ] && ssh-keygen -t ed25519 -o -a 100 -f "${sshkey}" -C "$(whoami)'s ${name} key") || echo "no such key at ${sshkey}"
}

function sadd() {
  name=$1
  ssh-add -t 12h "${HOME}/.ssh/${name}_$(whoami)_ed25519"
}

function cdp() {
  cd $HOME/Projects/personal
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdgo() {
  cd $GOPATH/src/github.com
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdg() {
  cd $HOME/Projects/github
  if [ -n "$1" ]; then
    cd $1
  fi
}

function loc() {
  # git ls-files | while read f; do git blame -f --line-porcelain "${f}" ; done | grep '^author ' | sort -f | uniq -ic | sort -n
  git ls-tree -r -z --name-only HEAD | xargs -0 -n1 git blame --line-porcelain HEAD | grep  "^author " | sort -f | uniq -ic | sort -n
}

function totloc() {
  # Walk through a top level directory into each git repo and get loc
  for d in `ls -d */`; do echo; pushd $d; if [ -d .git ]; then loc; fi; popd >> /dev/null ; done
}

function findSSH() {
  nmap -p22 -Pn -oG - 192.168.1.0/24 | awk '/22\/open/ {print $2}'
}

function findHTTP() {
  nmap -p80,8080,8081,3000,3001,3002 -Pn -oG - 192.168.0.0/16 | awk '/open/ {print $2}'
}

function findNAS() {
  nmap -p5000 -Pn -oG - 192.168.1.0/24 | awk '/open/ {print $2}' | egrep -v "192.168.0.1$"
}

function findUnifi() {
  nmap -p8443 -Pn -oG - 192.168.1.1/24 | awk '/open/ {print $2}'
}

function getuuid() {
  uuidgen | awk '{printf tolower($0)}' | tee /dev/tty | pbcopy && echo
}

# Stop RCD from opening iTunes when Bluetooth Headphones get a call
# Must run all commands with sudo
# https://discussions.apple.com/thread/2570254
function stopRCD() {
  launchctl stop com.apple.rcd
  launchctl unload /System/Library/LaunchAgents/com.apple.rcd.plist
}

function startRCD() {
  sudo chmod 755 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
  launchctl start com.apple.rcd
}

function nukeRCD() {
  sudo chmod 000 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
  sudo pkill -9 rcd
}

function unNukeRCD() {
  sudo chmod 755 /System/Library/CoreServices/rcd.app/Contents/MacOS/rcd
}

# Count uniq lines and reverse sort
function countuniquelines () { sort "$1" | uniq -c | sort -bgr; }

# Terraform utility
tf() {
  if [[ "$#" -eq 0 ]]; then
    terraform
  elif [[ "$1" == "fmt" ]] || [[ "$1" == "help" ]] || [[ "$1" == "validate" ]] || [[ "$1" == "version" ]]; then
    terraform "$@"
  else
    aws-vault exec ${AWS_PROFILE} -- terraform "$@"
  fi
}

tfvalidate() {
    terraform validate -json | jq '.diagnostics[] | {detail: .detail, filename: .range.filename, start_line: .range.start.line}'
}

# chamber utility
ch() {
  if [[ "$#" -eq 0 ]]; then
    chamber
  elif [[ "$1" == "help" ]] || [[ "$1" == "version" ]]; then
    chamber "$@"
  else
    aws-vault exec ${AWS_PROFILE} -- chamber "$@"
  fi
}

# AWS with aws-vault

awsgit() {
  aws-vault exec ${AWS_PROFILE} -- git "$@"
}

ave() {
  aws-vault exec ${AWS_PROFILE} -- "$@"
}

function awsbash() {
    if [ -n "${AWS_VAULT}" ]; then
        echo "ALREADY INSIDE aws-vault BASH!"
    else
        aws-vault exec "${AWS_PROFILE}" -- /usr/local/bin/bash
    fi
}

function awslogin() {
    if [ -n "${AWS_VAULT}" ]; then
        aws-vault login "${AWS_VAULT}"
    else
        [ -z "${AWS_PROFILE}" ] && echo "AWS_PROFILE not set" && return
        aws-vault login "${AWS_PROFILE}"
    fi
}

function awsenv() {
    env | grep AWS | sort
}

# Firefox needs containers turned on
# Add extension https://addons.mozilla.org/en-US/firefox/addon/open-url-in-container/
# https://github.com/mozilla/multi-account-containers/issues/365#issuecomment-527122371
function avl() {
  [ -z "${AWS_PROFILE}" ] && echo "AWS_PROFILE not set" && return
  FIREFOX="/Applications/Firefox.app/Contents/MacOS/firefox"
  LOGIN_URL=$(aws-vault login --stdout "${AWS_PROFILE}")
  # shellcheck disable=SC2181
  [[ $? != 0 ]] && echo "${LOGIN_URL}" && return
  ENCODED_URL="${LOGIN_URL//&/%26}"
  CONTAINER=$(cut -d"@" -f2 <<< "${AWS_PROFILE}")
  URI_HANDLER="ext+container:name=${CONTAINER}&url=${ENCODED_URL}"
  "${FIREFOX}" "${URI_HANDLER}"
}

# Python

venv() {
    python3 -m venv .venv
    source .venv/bin/activate
}

# DNS

myip() {
  dig +short myip.opendns.com @resolver1.opendns.com
}

# Time

utc() {
  echo "PST $(TZ=America/Los_Angeles date --rfc-3339=seconds | sed 's/ /T/')"
  echo "EST $(TZ=America/New_York date --rfc-3339=seconds | sed 's/ /T/')"
  echo "UTC $(TZ=UTC date --rfc-3339=seconds | sed 's/ /T/')"
}

# docker

function run_docker() {
    image=$1
    cmd=${2:-"/bin/bash"}
    docker run -it \
      --rm=true \
      -v "${HOME}/.aws/:/root/.aws:ro" \
      -v "${HOME}/.ssh/:/root/.ssh:ro" \
      -v "${PWD}:${PWD}" \
      -w "${PWD}" \
      "${image}" "${cmd}"
}

alias d_node16="run_docker node:16.14-slim"
alias d_py37="run_docker python:3.7-slim"
alias d_py38="run_docker python:3.8-slim"
alias d_py39="run_docker python:3.9-slim"
alias d_centos7="run_docker centos:7.9.2009"

