# functions
function random_prompt() {
  # Symbols from http://www.alanwood.net/unicode/miscellaneous_symbols.html
  prompts[0]="☭" # hammer & sickle
  prompts[1]="★" # star
  prompts[2]="☁" # cloud
  prompts[3]="☯" # yin-yang
  prompts[4]="♥" # heart
  prompts[5]="♦" # diamond
  prompts[6]="♣" # club
  prompts[7]="♠" # spade
  prompts[8]="♬" # music notes
  prompts[9]="☢" # radiation
  prompts[10]="☿" # mercury
  prompts[11]="♀" # venus
  prompts[12]="♁" # earth
  prompts[13]="♂" # mars
  prompts[14]="♃" # jupiter
  prompts[15]="♄" # saturn
  prompts[16]="♅" # uranus
  prompts[17]="♆" # neptune
  prompts[18]="♇" # pluto
  echo "${prompts[RANDOM % ${#prompts[@]}]}"
}

function git_current_branch() {
  git symbolic-ref HEAD 2> /dev/null | sed -e 's/refs\/heads\///'
}

function git_current_origin() {
  git config --get remote.origin.url | sed -e 's/^.*\://' | sed -e 's/\.git.*//'
}

function git_current_domain() {
  git config --get remote.origin.url | sed -e 's/^.*\@//' | sed -e 's/\:.*//'
}

function git_ref_origin() {
  git rev-parse origin
}

function git_ref_head() {
  git rev-parse HEAD
}

function git_branch_name() {
  git rev-parse --abbrev-ref HEAD
}

function sendkey() {
  ssh -q $USER@$1 "mkdir -p ~/.ssh; touch ~/.ssh/authorized_keys"
  cat ~/.ssh/id_rsa.pub | ssh -q $USER@$1 "cat - >> ~/.ssh/authorized_keys"
}

function cdp() {
  cd $HOME/Projects/personal
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdt() {
  cd $HOME/Projects/truss
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdgo() {
  cd $GOPATH/src/github.com/
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdg() {
  cd $HOME/Projects/github
  if [ -n "$1" ]; then
    cd $1
  fi
}

function cdb() {
  cd $HOME/Projects/biomimetics
  if [ -n "$1" ]; then
    cd $1
  fi
}

function gr() {
  args="$@"

  # If no directory specified, use '.'
  if (( $# < 2 )); then
    set -- "$@" .
  fi

  grep -r --color=auto \
    --exclude "bundle.js" \
    --exclude "*.iso" \
    --exclude "*.min.js" \
    --exclude "*.pyc" \
    --exclude "*.pyo" \
    --exclude "*.rdb" \
    --exclude "*.sql" \
    --exclude "*.swp" \
    --exclude "*.swo" \
    --exclude "package-lock.json" \
    --exclude-dir ".env" \
    --exclude-dir ".git" \
    --exclude-dir ".tox" \
    --exclude-dir ".venv" \
    --exclude-dir "aws-build" \
    --exclude-dir "bootstrap" \
    --exclude-dir "bower_components" \
    --exclude-dir "build" \
    --exclude-dir "dist" \
    --exclude-dir "env" \
    --exclude-dir "env3" \
    --exclude-dir "node_modules" \
    --exclude-dir "pkg" \
    --exclude-dir "swagger-ui" \
    --exclude-dir "venv" \
    --exclude-dir "venv3" \
    --exclude-dir "vizjs" \
    "${@:=.}"
}

function loc() {
  # git ls-files | while read f; do git blame -f --line-porcelain "${f}" ; done | grep '^author ' | sort -f | uniq -ic | sort -n
  git ls-tree -r -z --name-only HEAD | xargs -0 -n1 git blame --line-porcelain HEAD | grep  "^author " | sort -f | uniq -ic | sort -n
}

function totloc() {
  # Walk through a top level directory into each git repo and get loc
  for d in `ls -d */`; do echo; pushd $d; if [ -d .git ]; then loc; fi; popd >> /dev/null ; done
}
